{"version":3,"sources":["../index.js"],"names":["console","log","AWS","require","dynamodb","DynamoDB","apiVersion","docClient","DocumentClient","exports","handler","event","context","callback","method","httpMethod","bodyJson","JSON","parse","body","parameters","TableName","Item","put","err","data","writeAPIOutput","params","Key","get","expression","valueObject","nameObject","Object","keys","forEach","key","toString","valueKey","Math","random","substring","nameKey","length","UpdateExpression","ExpressionAttributeValues","ExpressionAttributeNames","update","delete","statCode","bodyMessage","response","statusCode","stringify"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nconsole.log('Loading event');\nlet AWS = require('aws-sdk');\nlet dynamodb = new AWS.DynamoDB({ apiVersion: '2012-08-10' });\nlet docClient = new AWS.DynamoDB.DocumentClient();\n\nexports.handler = function(event, context, callback) {\n    console.log(\"Entered function handler...\");\n    let method = event.httpMethod;\n\n    if (method === \"POST\") { //Create a new user in the database\n        console.log(\"Handling create user event\");\n\n        let bodyJson = JSON.parse(event.body);\n        console.log(\"Body received: \", bodyJson);\n\n        let parameters = {\n            TableName: 'User',\n            Item: bodyJson\n        };\n\n        docClient.put(parameters, function(err, data) {\n            if (err) {\n                console.log(\"Error\", err);\n\n                writeAPIOutput(500, \"Server error\", callback);\n            }\n            else {\n                console.log(\"Success\", data);\n\n                writeAPIOutput(200, \"Successfully created user!\", callback);\n            }\n        });\n    }\n    else if (method === \"GET\") { //Retrieve an existing user from the database\n        console.log(\"Handling get user event\");\n\n        let bodyJson = event[\"queryStringParameters\"];\n        console.log(\"Body received: \", bodyJson);\n\n        let params = {\n            TableName: \"User\",\n            Key: bodyJson\n        };\n\n        docClient.get(params, function(err, data) {\n            if (err) {\n                console.log(err);\n\n                writeAPIOutput(500, err, callback);\n            }\n            else {\n                console.log(data[\"Item\"]);\n\n                writeAPIOutput(200, data[\"Item\"], callback)\n            }\n        });\n\n    }\n    else if (method === \"UPDATE\") {\n        console.log(\"Handling update user event\");\n\n        let bodyJson = JSON.parse(event.body);\n        console.log(\"Body received: \", bodyJson);\n\n        let expression = \"\";\n        let valueObject = {};\n        let nameObject = {};\n\n        Object.keys(bodyJson).forEach((key) => {\n            if (key.toString() !== \"email\") {\n                let valueKey = \":\" + Math.random().toString(36).substring(7);\n                let nameKey = \"#\" + Math.random().toString(36).substring(7);\n\n                expression += nameKey + \" = \" + valueKey + \", \";\n\n                valueObject[valueKey] = bodyJson[key];\n                nameObject[nameKey] = key.toString();\n            }\n        });\n\n        expression = \"set \" + expression.substring(0, expression.length - 2);\n\n        let params = {\n            TableName: \"User\",\n            Key: {\n                \"email\": bodyJson[\"email\"]\n            },\n            UpdateExpression: expression,\n            ExpressionAttributeValues: valueObject,\n            ExpressionAttributeNames: nameObject\n        };\n\n        console.log(expression);\n        console.log(valueObject);\n        console.log(params);\n\n        docClient.update(params, (err, data) => {\n            if (err) {\n                console.log(err);\n\n                writeAPIOutput(500, \"Server error\", callback);\n            }\n            else {\n                console.log(data);\n\n                writeAPIOutput(200, \"Successfully updated user!\", callback);\n            }\n        });\n    }\n    else if (method === \"DELETE\") {\n        console.log(\"Handling delete user event\");\n\n        let bodyJson = JSON.parse(event.body);\n        console.log(\"Body received: \", bodyJson);\n\n        let params = {\n            TableName: \"User\",\n            Key: bodyJson\n        };\n\n        docClient.delete(params, function(err, data) {\n            if (err) {\n                console.log(err);\n\n                writeAPIOutput(500, \"Server error\", callback);\n            }\n            else {\n                console.log(data);\n\n                writeAPIOutput(200, \"Successfully deleted user!\", callback);\n            }\n        });\n    }\n};\n\nfunction writeAPIOutput(statCode, bodyMessage, callback) {\n    let response = {\n        statusCode : statCode,\n        body: JSON.stringify(bodyMessage)\n    };\n\n    callback(null, response);\n}\n"]}