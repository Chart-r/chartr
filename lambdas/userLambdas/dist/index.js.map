{"version":3,"sources":["../index.js"],"names":["console","log","AWS","require","dynamodb","DynamoDB","apiVersion","docClient","DocumentClient","exports","handler","event","context","method","httpMethod","bodyJson","JSON","parse","body","parameters","TableName","Item","put","err","data","params","Key","get","done","expression","valueObject","nameObject","Object","keys","forEach","key","toString","valueKey","Math","random","substring","nameKey","length","UpdateExpression","ExpressionAttributeValues","ExpressionAttributeNames","update"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nconsole.log('Loading event');\nlet AWS = require('aws-sdk');\nlet dynamodb = new AWS.DynamoDB({ apiVersion: '2012-08-10' });\nlet docClient = new AWS.DynamoDB.DocumentClient();\n\nexports.handler = function(event, context) {\n    console.log(\"Entered function handler...\");\n    let method = event.httpMethod;\n\n    if (method === \"POST\") { //Create a new user in the database\n        console.log(\"Handling create user event\");\n\n        let bodyJson = JSON.parse(event.body);\n        console.log(\"Body received: \", bodyJson);\n\n        let parameters = {\n            TableName: 'User',\n            Item: bodyJson\n        };\n\n        docClient.put(parameters, function(err, data) {\n            if (err) {\n                console.log(\"Error\", err);\n            }\n            else {\n                console.log(\"Success\", data);\n            }\n        });\n    }\n    else if (method === \"GET\") { //Retrieve an existing user from the database\n        console.log(\"Handling get user event\");\n\n        let bodyJson = JSON.parse(event.body);\n        console.log(\"Body received: \", bodyJson);\n\n        let params = {\n            TableName: \"User\",\n            Key: bodyJson\n        };\n\n        docClient.get(params, function(err, data) {\n            if (err) console.log(err);\n            else console.log(data[\"Item\"]);\n\n            context.done(null, data[\"Item\"]);\n        });\n\n    }\n    else if (method === \"UPDATE\") {\n        console.log(\"Handling update user event\");\n\n        let bodyJson = JSON.parse(event.body);\n        console.log(\"Body received: \", bodyJson);\n\n        let expression = \"\";\n        let valueObject = {};\n        let nameObject = {};\n\n        Object.keys(bodyJson).forEach((key) => {\n            if (key.toString() !== \"email\") {\n                let valueKey = \":\" + Math.random().toString(36).substring(7);\n                let nameKey = \"#\" + Math.random().toString(36).substring(7);\n\n                expression += nameKey + \" = \" + valueKey + \", \";\n\n                valueObject[valueKey] = bodyJson[key];\n                nameObject[nameKey] = key.toString();\n            }\n        });\n\n        expression = \"set \" + expression.substring(0, expression.length - 2);\n\n        let params = {\n            TableName: \"User\",\n            Key: {\n                \"email\": bodyJson[\"email\"]\n            },\n            UpdateExpression: expression,\n            ExpressionAttributeValues: valueObject,\n            ExpressionAttributeNames: nameObject\n        };\n\n        console.log(expression);\n        console.log(valueObject);\n        console.log(params);\n\n        docClient.update(params, (err, data) => {\n            if (err) console.log(err);\n            else console.log(data);\n        });\n    }\n    else if (method === \"DELETE\") {\n        console.log(\"Handling delete user event\");\n    }\n};\n"]}